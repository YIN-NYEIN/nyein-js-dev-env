!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/",t(t.s=2)}([function(e,n,t){var r;
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
(function(){var t,i={},o="en",u=null,a="0,0",l=void 0!==e&&e.exports;function c(e){this._value=e}function f(e,n,t,r){var i,o,u=Math.pow(10,n);return o=(t(e*u)/u).toFixed(n),r&&(i=new RegExp("0{1,"+r+"}$"),o=o.replace(i,"")),o}function s(e,n,t){return n.indexOf("$")>-1?function(e,n,t){var r,u,a=n.indexOf("$"),l=n.indexOf("("),c=n.indexOf("-"),f="";n.indexOf(" $")>-1?(f=" ",n=n.replace(" $","")):n.indexOf("$ ")>-1?(f=" ",n=n.replace("$ ","")):n=n.replace("$","");u=d(e._value,n,t),a<=1?u.indexOf("(")>-1||u.indexOf("-")>-1?(u=u.split(""),r=1,(a<l||a<c)&&(r=0),u.splice(r,0,i[o].currency.symbol+f),u=u.join("")):u=i[o].currency.symbol+f+u:u.indexOf(")")>-1?((u=u.split("")).splice(-1,0,f+i[o].currency.symbol),u=u.join("")):u=u+f+i[o].currency.symbol;return u}(e,n,t):n.indexOf("%")>-1?function(e,n,t){var r,i="",o=100*e._value;n.indexOf(" %")>-1?(i=" ",n=n.replace(" %","")):n=n.replace("%","");(r=d(o,n,t)).indexOf(")")>-1?((r=r.split("")).splice(-1,0,i+"%"),r=r.join("")):r=r+i+"%";return r}(e,n,t):n.indexOf(":")>-1?function(e){var n=Math.floor(e._value/60/60),t=Math.floor((e._value-60*n*60)/60),r=Math.round(e._value-60*n*60-60*t);return n+":"+(t<10?"0"+t:t)+":"+(r<10?"0"+r:r)}(e):d(e._value,n,t)}function p(e,n){var t,r,a,l,c,f=n,s=["KB","MB","GB","TB","PB","EB","ZB","YB"],p=!1;if(n.indexOf(":")>-1)e._value=function(e){var n=e.split(":"),t=0;3===n.length?(t+=60*Number(n[0])*60,t+=60*Number(n[1]),t+=Number(n[2])):2===n.length&&(t+=60*Number(n[0]),t+=Number(n[1]));return Number(t)}(n);else if(n===u)e._value=0;else{for("."!==i[o].delimiters.decimal&&(n=n.replace(/\./g,"").replace(i[o].delimiters.decimal,".")),t=new RegExp("[^a-zA-Z]"+i[o].abbreviations.thousand+"(?:\\)|(\\"+i[o].currency.symbol+")?(?:\\))?)?$"),r=new RegExp("[^a-zA-Z]"+i[o].abbreviations.million+"(?:\\)|(\\"+i[o].currency.symbol+")?(?:\\))?)?$"),a=new RegExp("[^a-zA-Z]"+i[o].abbreviations.billion+"(?:\\)|(\\"+i[o].currency.symbol+")?(?:\\))?)?$"),l=new RegExp("[^a-zA-Z]"+i[o].abbreviations.trillion+"(?:\\)|(\\"+i[o].currency.symbol+")?(?:\\))?)?$"),c=0;c<=s.length&&!(p=n.indexOf(s[c])>-1&&Math.pow(1024,c+1));c++);e._value=(p||1)*(f.match(t)?Math.pow(10,3):1)*(f.match(r)?Math.pow(10,6):1)*(f.match(a)?Math.pow(10,9):1)*(f.match(l)?Math.pow(10,12):1)*(n.indexOf("%")>-1?.01:1)*((n.split("-").length+Math.min(n.split("(").length-1,n.split(")").length-1))%2?1:-1)*Number(n.replace(/[^0-9\.]+/g,"")),e._value=p?Math.ceil(e._value):e._value}return e._value}function d(e,n,t){var r,a,l,c,s,p,d=!1,h=!1,v=!1,b="",m=!1,y=!1,g=!1,x=!1,w=!1,O="",M="",_=Math.abs(e),B=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],$="",N=!1;if(0===e&&null!==u)return u;if(n.indexOf("(")>-1?(d=!0,n=n.slice(1,-1)):n.indexOf("+")>-1&&(h=!0,n=n.replace(/\+/g,"")),n.indexOf("a")>-1&&(m=n.indexOf("aK")>=0,y=n.indexOf("aM")>=0,g=n.indexOf("aB")>=0,x=n.indexOf("aT")>=0,w=m||y||g||x,n.indexOf(" a")>-1?(b=" ",n=n.replace(" a","")):n=n.replace("a",""),_>=Math.pow(10,12)&&!w||x?(b+=i[o].abbreviations.trillion,e/=Math.pow(10,12)):_<Math.pow(10,12)&&_>=Math.pow(10,9)&&!w||g?(b+=i[o].abbreviations.billion,e/=Math.pow(10,9)):_<Math.pow(10,9)&&_>=Math.pow(10,6)&&!w||y?(b+=i[o].abbreviations.million,e/=Math.pow(10,6)):(_<Math.pow(10,6)&&_>=Math.pow(10,3)&&!w||m)&&(b+=i[o].abbreviations.thousand,e/=Math.pow(10,3))),n.indexOf("b")>-1)for(n.indexOf(" b")>-1?(O=" ",n=n.replace(" b","")):n=n.replace("b",""),l=0;l<=B.length;l++)if(r=Math.pow(1024,l),a=Math.pow(1024,l+1),e>=r&&e<a){O+=B[l],r>0&&(e/=r);break}return n.indexOf("o")>-1&&(n.indexOf(" o")>-1?(M=" ",n=n.replace(" o","")):n=n.replace("o",""),M+=i[o].ordinal(e)),n.indexOf("[.]")>-1&&(v=!0,n=n.replace("[.]",".")),c=e.toString().split(".")[0],s=n.split(".")[1],p=n.indexOf(","),s?(c=($=s.indexOf("[")>-1?f(e,(s=(s=s.replace("]","")).split("["))[0].length+s[1].length,t,s[1].length):f(e,s.length,t)).split(".")[0],$=$.split(".")[1].length?i[o].delimiters.decimal+$.split(".")[1]:"",v&&0===Number($.slice(1))&&($="")):c=f(e,null,t),c.indexOf("-")>-1&&(c=c.slice(1),N=!0),p>-1&&(c=c.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+i[o].delimiters.thousands)),0===n.indexOf(".")&&(c=""),(d&&N?"(":"")+(!d&&N?"-":"")+(!N&&h?"+":"")+c+$+(M||"")+(b||"")+(O||"")+(d&&N?")":"")}function h(e){var n=e.toString().split(".");return n.length<2?1:Math.pow(10,n[1].length)}function v(){return Array.prototype.slice.call(arguments).reduce(function(e,n){var t=h(e),r=h(n);return t>r?t:r},-1/0)}(t=function(e){return t.isNumeral(e)?e=e.value():0===e||void 0===e?e=0:Number(e)||(e=t.fn.unformat(e)),new c(Number(e))}).version="1.5.3",t.isNumeral=function(e){return e instanceof c},t.language=function(e,n){if(!e)return o;if(e&&!n){if(!i[e])throw new Error("Unknown language : "+e);o=e}return!n&&i[e]||function(e,n){i[e]=n}(e,n),t},t.languageData=function(e){if(!e)return i[o];if(!i[e])throw new Error("Unknown language : "+e);return i[e]},t.language("en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var n=e%10;return 1==~~(e%100/10)?"th":1===n?"st":2===n?"nd":3===n?"rd":"th"},currency:{symbol:"$"}}),t.zeroFormat=function(e){u="string"==typeof e?e:null},t.defaultFormat=function(e){a="string"==typeof e?e:"0.0"},"function"!=typeof Array.prototype.reduce&&(Array.prototype.reduce=function(e,n){"use strict";if(null===this||void 0===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof e)throw new TypeError(e+" is not a function");var t,r,i=this.length>>>0,o=!1;for(1<arguments.length&&(r=n,o=!0),t=0;i>t;++t)this.hasOwnProperty(t)&&(o?r=e(r,this[t],t,this):(r=this[t],o=!0));if(!o)throw new TypeError("Reduce of empty array with no initial value");return r}),t.fn=c.prototype={clone:function(){return t(this)},format:function(e,n){return s(this,e||a,void 0!==n?n:Math.round)},unformat:function(e){return"[object Number]"===Object.prototype.toString.call(e)?e:p(this,e||a)},value:function(){return this._value},valueOf:function(){return this._value},set:function(e){return this._value=Number(e),this},add:function(e){var n=v.call(null,this._value,e);return this._value=[this._value,e].reduce(function(e,t,r,i){return e+n*t},0)/n,this},subtract:function(e){var n=v.call(null,this._value,e);return this._value=[e].reduce(function(e,t,r,i){return e-n*t},this._value*n)/n,this},multiply:function(e){return this._value=[this._value,e].reduce(function(e,n,t,r){var i=v(e,n);return e*i*(n*i)/(i*i)},1),this},divide:function(e){return this._value=[this._value,e].reduce(function(e,n,t,r){var i=v(e,n);return e*i/(n*i)}),this},difference:function(e){return Math.abs(t(this._value).subtract(e).value())}},l&&(e.exports=t),"undefined"==typeof ender&&(this.numeral=t),void 0===(r=function(){return t}.apply(n,[]))||(e.exports=r)}).call(this)},function(e,n,t){t(0)(1e3).format("$0,0.00");console.log("I would play ${courseValue} for this awesome course!")},function(e,n,t){e.exports=t(1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,